% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sanity_check_functions.R
\name{check_genome_mutations}
\alias{check_genome_mutations}
\title{Validate Mutations in Simulated Genome}
\usage{
check_genome_mutations(clone_genome, clone_mutation_table, clone_seg_list)
}
\arguments{
\item{clone_genome}{A nested list containing genome sequences:
\itemize{
\item First level: haplotypes (maternal/paternal)
\item Second level: chromosomes with nucleotide sequences
}}

\item{clone_mutation_table}{A data frame containing mutation information:
\itemize{
\item haplotype - Maternal or paternal copy
\item chrom - Chromosome name
\item pos - Mutation position
\item alternative_nt - Expected nucleotide after mutation
}}

\item{clone_seg_list}{A nested list containing segment information:
\itemize{
\item First level: haplotypes
\item Second level: data frame with segment details including loss information
}}
}
\value{
A nested list where:
\itemize{
\item First level: haplotypes
\item Second level: chromosomes
\item Values are either:
\itemize{
\item Success message if all mutations are correct
\item Data frame of incorrect mutations with details for investigation
}
}
}
\description{
Verifies that mutations in the simulated genome match their expected alternative
nucleotides, accounting for lost segments that should contain 'N's.
}
\details{
The function:
\enumerate{
\item Processes mutations chromosome by chromosome
\item Checks if mutations fall in lost segments (should be 'N')
\item Compares actual nucleotides to expected ones
\item Provides detailed output only for incorrect mutations
\item Handles special cases:
\itemize{
\item Mutations in lost segments
\item No mutations in a chromosome
}
}
}
\examples{
\dontrun{
validation_results <- check_genome_mutations(
  clone_genome = synthesized_genome,
  clone_mutation_table = mutations,
  clone_seg_list = segments
)
# Check results for specific chromosome
validation_results$maternal$chr1
}
}
